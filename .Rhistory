as_tibble() %>%
cbind(data_nmds) %>%
as_tibble()%>%
ggplot(aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = regiao)) +
stat_ellipse(geom = "polygon", aes(group = regiao, color = regiao, fill = regiao), alpha = 0.3) +
annotate("text", x = -2, y = 0.95, label = paste0("stress: ", format(nmds$stress, digits = 4)), hjust = 0) +
theme_bw()
scores(nmds)  %>%
as_tibble() %>%
cbind(data_nmds) %>%
as_tibble()%>%
ggplot(aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = regiao)) +
stat_ellipse(geom = "polygon", aes(group = regiao, color = regiao, fill = regiao), alpha = 0.1) +
annotate("text", x = -2, y = 0.95, label = paste0("stress: ", format(nmds$stress, digits = 4)), hjust = 0) +
theme_bw()
adonis2(dist_bray~data_nmds$regiao,permutations = 1000)
load("~/Documentos/OS 47549 Gratchela/Documents/geometric_morphometrics/.RData")
?procD.lm
??procD.lm
print(fit2)
size
ggplot(df_to_plot, aes(y = size, x = tab_pop, fill = tab_pop)) +
geom_boxplot(outlier.colour = NULL, aes_string(colour = "tab_pop", fill = "tab_pop")) +
stat_summary(
geom = "crossbar", width = 0.65, fatten = 0,
color = "white",
fun.data = function(x) {
return(c(
y = median(x),
ymin = median(x), ymax = median(x)
))
}
) +
theme_bw() +
scale_color_grey() +
scale_fill_grey() +
labs(x = "Populations", y = "Centroid Size")
pacman::p_load(
Rvcg, geomorph, MASS, Morpho, colorspace, cluster, DiscriMiner,
ellipse, ggplot2, mclust, NbClust, shapes, vegan, tidyverse, processx,
plotly
)
size/100
df_to_plot <- tibble(size/100, tab_pop)
ggplot(df_to_plot, aes(y = size, x = tab_pop, fill = tab_pop)) +
geom_boxplot(outlier.colour = NULL, aes_string(colour = "tab_pop", fill = "tab_pop")) +
stat_summary(
geom = "crossbar", width = 0.65, fatten = 0,
color = "white",
fun.data = function(x) {
return(c(
y = median(x),
ymin = median(x), ymax = median(x)
))
}
) +
theme_bw() +
scale_color_grey() +
scale_fill_grey() +
labs(x = "Populations", y = "Centroid Size")
df_to_plot <- tibble(size=size/100, tab_pop)
df_to_plot
ggplot(df_to_plot, aes(y = size, x = tab_pop, fill = tab_pop)) +
geom_boxplot(outlier.colour = NULL, aes_string(colour = "tab_pop", fill = "tab_pop")) +
stat_summary(
geom = "crossbar", width = 0.65, fatten = 0,
color = "white",
fun.data = function(x) {
return(c(
y = median(x),
ymin = median(x), ymax = median(x)
))
}
) +
theme_bw() +
scale_color_grey() +
scale_fill_grey() +
labs(x = "Populations", y = "Centroid Size")
teste_t <- t.test(size ~ tab_pop)
teste_t
teste_t <- t.test(size/100 ~ tab_pop)
teste_t
require(climate4R.datasets)
devtools::install_github("SantanderMetGroup/climate4R.datasets")
??transformR
library(transformeR)
??transformR
data("VALUE_Iberia_tas")
??transformeR
load("/home/dell/Downloads/NCEP_Iberia_hus850.rda")
View(NCEP_Iberia_hus850)
plot(NCEP_Iberia_hus850)
View(NCEP_Iberia_hus850)
NCEP_Iberia_hus850[["Variable"]]
NCEP_Iberia_hus850[["Data"]]
library(ellipsenm)
load("~/Documentos/estagio_rafa/.RData")
scores(nmds)  %>%
as_tibble() %>%
cbind(data_nmds) %>%
as_tibble()%>%
ggplot(aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = regiao)) +
#stat_ellipse(geom = "polygon", aes(group = regiao, color = regiao, fill = regiao), alpha = 0.01) +
annotate("text", x = -2, y = 0.95, label = paste0("stress: ", format(nmds$stress, digits = 4)), hjust = 0)
library('tidyverse')
library('plotly')
library('vegan')
library('egg')
library('iNEXT')
scores(nmds)  %>%
as_tibble() %>%
cbind(data_nmds) %>%
as_tibble()%>%
ggplot(aes(x = NMDS1, y = NMDS2)) +
geom_point(aes(color = regiao)) +
#stat_ellipse(geom = "polygon", aes(group = regiao, color = regiao, fill = regiao), alpha = 0.01) +
annotate("text", x = -2, y = 0.95, label = paste0("stress: ", format(nmds$stress, digits = 4)), hjust = 0)
library(kuenm)
?kuenm_mopagree
install.packages('behaviouR')
devtools::install_github("https://github.com/DenaJGibbon/behaviouR")
install.packages("tidycensus")
library(tidycensus)
?get_acs
key <- '697dbe186b5d13af4ae280ace113673b08ea8395'
census_api_key(key)
key <- '697dbe186b5d13af4ae280ace113673b08ea8395'
census_api_key(key)
bibliometrix::biblioshiny()
?kuenm_mopagree()
?kuenm_mopagree()
?kuenm_modvar(sp.name = specie_name, fmod.dir = fmod_dir, replicated = rep, format = format,
project = project, current = curr, emi.scenarios = emi_scenarios,
clim.models = c_mods, ext.type = ext_type, split.length = split, out.dir = out_dir2,
is.swd = F)
library(tidyverse)
library(rgbif)
library(leaflet)
library(Rocc)
library(rgdal)
library(rgeos)
library(raster)
library(sp)
library(maptools)
library(tmap)
library(sf)
library(ellipsenm)
library(kuenm)
library(ntbox)
library(dotenv)
neotropic <-
readOGR(
dsn = ("data/raw/raster"),
layer = "Neotropic",
verbose = FALSE
)
source("src/functions.R")
source('http://cemin.wikidot.com/local--files/raisr/rais.r')
install.packages('basededados')
net install basedosdados, from("https://raw.githubusercontent.com/basedosdados/mais/master/stata-package")
library(basededados)
install.packages("basedosdados")
library(basededados)
library(basedosdados)
library(scales)
library(tidyverse)
id_projeto <- 'rais-404114'
basedosdados::get_billing_id(id_projeto)
id_projeto <- 'rais-404114'
basedosdados::get_billing_id(id_projeto)
basedosdados::set_billing_id(id_projeto)
tabela_db <- 'br_me_rais.microdados_estabelecimentos"
asd
))
-as<-4
<-
....
()
646
buffer_area_list <- c(100, 250, 300, 400)
}
}
for (i in seq_along(species_list)){
for (f in seq_along(buffer_area_list)){
print(paste(species_list[[i]], buffer_area_list[[f]])
}
for (i in seq_along(species_list)){
for (f in seq_along(buffer_area_list)){
print(species_list[[i]])
print(buffer_area_list[[f]])
}
}
species_list <-
c(
"Anopheles_albimanus", "Anopheles_albitarsis", "Anopheles_apicimacula",
"Anopheles_aquasalis", "Anopheles_argyritarsis", "Anopheles_braziliensis",
# "Anopheles_cruzii",
"Anopheles_eiseni", "Anopheles_evansae", "Anopheles_intermedius",
"Anopheles_mediopunctatus",
# "Anopheles_nuneztovari",
"Anopheles_oswaldoi", "Anopheles_peryassui", "Anopheles_pseudopunctipennis",
"Anopheles_punctimacula", "Anopheles_rangeli", "Anopheles_strodei"
# "Anopheles_triannulatos")
)
buffer_area_list <- c(100, 250, 300, 400)
for (i in seq_along(species_list)){
for (f in seq_along(buffer_area_list)){
print(species_list[[i]])
print(buffer_area_list[[f]])
}
}
countries <- sf::st_read("https://rstudio.github.io/leaflet/json/countries.geojson")
countries
View(countries)
map <- leaflet(countries)
map <- leaflet::leaflet(countries)
map
bibliometrix::net2VOSviewer()
bibliometrix::countries
pacman::p_load(
Rvcg, geomorph, MASS, Morpho, colorspace, cluster, DiscriMiner,
ellipse, ggplot2, mclust, NbClust, shapes, vegan, tidyverse, processx,
plotly
)
?ggsave
ggsave("cva",
path = "output", units = 'mm', width = 80, height = 180,
device = "tiff", dpi = 700, limitsize = FALSE
)
ggplot(CVscores, aes(CV.1, fill = tab_pop)) +
geom_histogram() +
theme_bw() +
scale_fill_manual(
name = "Populations", labels = label_dc,
values = c("#14b8b8", "#BE3455")
) +
labs(x = "Canonical Variate 1", y = "Frequency")
ggsave("cva",
path = "output", units = 'mm', width = 80, height = 180,
device = "tiff", dpi = 700, limitsize = FALSE
)
save.image("~/Documentos/OS 47549 Gratchela/Documents/geometric_morphometrics/.RData")
ggplot(CVscores, aes(CV.1, fill = tab_pop)) +
geom_histogram() +
theme_bw() +
scale_fill_manual(
name = "Populations", labels = label_dc,
values = c("#14b8b8", "#BE3455")
) +
labs(x = "Canonical Variate 1", y = "Frequency")
citation()
library(stringi)
help(kuenm_mop)
??kuenm_mop
library(raster)
r <- raster(nrow=18, ncol=36)
plot(r)
r <- raster(nrow=18, ncol=36)
plot(r)
values(r) <- runif(ncell(r)) * 10
r[r>8] <- NA
plot(r)
r <- raster(nrow=18, ncol=36)
values(r) <- runif(ncell(r)) * 10
plot(r)
values(r) <- runif(ncell(r)) * 10
r[r>8] <- NA
plot(r)
pol <- rasterToPolygons(r, fun=function(x){x>6})
plot(pol)
library(raster)
r <- raster(nrow=18, ncol=36)
values(r) <- runif(ncell(r)) * 10
plot(r)
st_polygonize(r)
library(sf)
st_polygonize(r)
st_read(r)
install.packages(pheatmap)
install.packages(pheatmap)
install.packages('pheatmap')
library(pheatmap)
install.packages("BiocManager")
# install and load package
BiocManager::install("DESeq")
library(tidyverse)
library(stringi)
# Esse código é gerado quando se cria um projeto lá no googlecloud
# https://console.cloud.google.com
id_projeto <- "rais87512"
# aqui se vincula com o email a conexão com a base de dados
basedosdados::set_billing_id(id_projeto)
# tabela que será utilizada
tabela_db <- "br_me_rais.microdados_vinculos"
# construção da query
rais_dbl <- basedosdados::bdplyr(tabela_db) %>%
filter(ano >= 2000, sigla_uf != "IGNORADO", vinculo_ativo_3112 != 0) %>%
select(
ano, vinculo_ativo_3112, valor_remuneracao_media, sigla_uf,
id_municipio, cnae_1
) %>%
group_by(sigla_uf, id_municipio, ano) %>%
summarise(
soma_vinculo_ativo = sum(vinculo_ativo_3112),
soma_rem_media = sum(valor_remuneracao_media)
) %>%
mutate(massa_salarial = soma_vinculo_ativo * soma_rem_media)
View(rais_dbl)
# salvando o dataset
write.csv(rais_dbl %>% ungroup(), "data_rais_raw.csv")
# construção da query
rais_dbl <- basedosdados::bdplyr(tabela_db) %>%
filter(ano >= 2000, sigla_uf != "IGNORADO", vinculo_ativo_3112 != 0) %>%
select(
ano, vinculo_ativo_3112, valor_remuneracao_media, sigla_uf,
id_municipio, cnae_1
) %>%
mutate(v_quimicos = ifelse(substr(cnae_1, 1, 2) %in% c("24"),
vinculo_ativo_3112, 0),
rem_media_quim = ifelse(substr(cnae_1, 1, 2) %in% c("24"),
valor_remuneracao_media, 0)) %>%
group_by(sigla_uf, id_municipio, ano, cnae_1) %>%
summarise(
soma_vinculo_ativo = sum(vinculo_ativo_3112),
soma_rem_media = sum(valor_remuneracao_media),
soma_v_quimicos = sum(v_quimicos),
soma_rem_media_quim = sum(rem_media_quim)
)
# construção da query
rais_dbl <- basedosdados::bdplyr(tabela_db) %>%
filter(ano >= 2000, sigla_uf != "IGNORADO", vinculo_ativo_3112 != 0) %>%
select(
ano, vinculo_ativo_3112, valor_remuneracao_media, sigla_uf,
id_municipio, cnae_1
) %>%
mutate(v_quimicos = ifelse(substr(cnae_1, 1, 2) %in% c("24"),
vinculo_ativo_3112, 0),
rem_media_quim = ifelse(substr(cnae_1, 1, 2) %in% c("24"),
valor_remuneracao_media, 0)) %>%
group_by(sigla_uf, id_municipio, ano) %>%
summarise(
soma_vinculo_ativo = sum(vinculo_ativo_3112),
soma_rem_media = sum(valor_remuneracao_media),
soma_v_quimicos = sum(v_quimicos),
soma_rem_media_quim = sum(rem_media_quim)
)
# salvando o dataset
write.csv(rais_dbl %>% ungroup(), "data_rais_raw.csv")
devtools::install_github("paternogbc/ecodados")
library(ecodados)
data("women")
View(women)
data("bocaina")
View(bocaina)
data("treering")
data("swiss")
View(swiss)
data("lh")
lh
data("iris3")
iris3
data("iris")
data("esoph")
esoph
data()
data()
data("especies_plantas")
especies_plantas
data("anuros_ambientais")
anuros_ambientais
data("parasitas")
parasitas
data("DNase")
DNase
?data("DNase")
data()
InsectSprays
anuros_ambientais
InsectSprays
data("Cap10_exercicio1")
View(Cap10_exercicio1)
data("Cap7_exercicio1")
Cap7_exercicio1
parasitas
titanic
titanic
data(titanic)
data("HairEyeColor")
HairEyeColor
iris
# Riqueza das espécies por mês
# temperatura média
riqueza_por_estação <-
tabela_ajustada %>%
group_by(Mês) %>%
summarise(
"Temp_media" = round(mean(Temperatura...C.), 3),
"umidade" = round(mean(Umidade...), 3)
"riqueza" = n_distinct(Espécie),
# Riqueza das espécies por mês
# temperatura média
riqueza_por_estação <-
tabela_ajustada %>%
group_by(Mês) %>%
summarise(
"Temp_media" = round(mean(Temperatura...C.), 3),
"umidade" = round(mean(Umidade...), 3),
"riqueza" = n_distinct(Espécie),
"abundancia" = n()
)
library(tidyverse)
library(plotly)
library(VennDiagram)
# Riqueza das espécies por mês
# temperatura média
riqueza_por_estação <-
tabela_ajustada %>%
group_by(Mês) %>%
summarise(
"Temp_media" = round(mean(Temperatura...C.), 3),
"umidade" = round(mean(Umidade...), 3),
"riqueza" = n_distinct(Espécie),
"abundancia" = n()
)
# Instalando pacotes no R
install.packages("tidyverse")
install.packages("plotly")
# Chamando o pacote
library(tidyverse)
library(plotly)
library(VennDiagram)
# Aula 1 ------------------------------------------------------------------
# lendo tabelas
tabela <- read.csv("data/data.csv")
install.packages("plotly")
library(terra)
??disaggregate
r <- raster(ncols=10, nrows=10)
rd <- disaggregate(r, fact=c(10, 2))
ncol(rd)
nrow(rd)
source("src/utils/functions.R")
source("src/utils/libraries.R")
list_file_current <-
list.files(
path = paste0(getwd(), "/data/layers/Current"),
pattern = "\\.asc$", full.names = T
)
setwd("~/Documentos/niche_model_dermatobia")
source("src/utils/functions.R")
source("src/utils/libraries.R")
list_file_current <-
list.files(
path = paste0(getwd(), "/data/layers/Current"),
pattern = "\\.asc$", full.names = T
)
current_neotropic_layer <-
stack(list_file_current)
sp_name <- 'dhominis'
neotropic <-
readOGR(
dsn = ("data/shapefile/neotropic"),
layer = "neotropic",
verbose = FALSE
)
km <- 600
# Buffer Area -------------------------------------------------------------
path_workflow <- paste0("data/workflow_maxent")
path_calibration <- paste0(path_workflow, "/km_", km)
dir_create(path_calibration)
occ <- read.csv(paste0(
path_workflow, "/", sp_name, "_joint.csv"
)) %>% select(-X)
WGS84 <- CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
occ_sp <- SpatialPointsDataFrame(
coords = occ[, 2:3], data = occ,
proj4string = WGS84
)
## project the points using their centroids as reference
centroid <- gCentroid(occ_sp, byid = FALSE)
AEQD <- CRS(paste("+proj=aeqd +lat_0=", centroid@coords[2], " +lon_0=", centroid@coords[1],
" +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs",
sep = ""
))
occ_pr <- spTransform(occ_sp, AEQD)
## create a buffer based on a 500 km distance
buffer_area <- gBuffer(occ_pr, width = km * 1000, quadsegs = 30)
#debugar, essa parte ta dando erro mais pra frente por não funcionar
buffer_area <- disaggregate(buffer_area)
r <- raster(ncols=10, nrows=10)
rd <- disaggregate(r, fact=c(10, 2))
ncol(rd)
nrow(rd)
ncol(r)
nrow(r)
plot(r)
plot(rd)
detach(sp)
detach('sp')
detach("vegan")
detach("package:sp", unload=TRUE)
detach("package:maptools", unload=TRUE)
detach("package:sp", unload=TRUE)
detach("package:rgeos", unload=TRUE)
detach("package:sp", unload=TRUE)
detach("package:rgdal", unload=TRUE)
detach("package:sp", unload=TRUE)
detach("package:raster", unload=TRUE)
detach("package:leafem", unload=TRUE)
