install.packages('gambin')
library(moths)
library(gambin)
data(moths)
fit = fit_abundances(moths)
barplot(fit)
lines(fit)
AIC(fit)
fit_abundances
moths
data(moths)
moths
AIC(fit)
fit
moths
fit_cerrado =
iris
iris$Species
positive = c ("P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"P. lindneri",
"D. missionum",
"Morfotipo 1",
"P. lindneri",
"P. lindneri",
"D. missionum",
"D. missionum",
"D. missionum",
"D. missionum",
"D. missionum",
"T. fuscofasciatus",
"P. lindneri",
"P. lindneri",
"P. lindneri")
table(positive)
<- data.frame(table(positive))
df<- data.frame(table(positive))
df
ggplot(df,
aes(x = Coleta, y = abundância, color = Espécies, group = Espécies)) +
geom_point() + geom_line() + theme_light() + xlab("Distância (m)") +
ylab("Abundância")
library(ggplot2)
ggplot(df,
aes(x = Coleta, y = abundância, color = Espécies, group = Espécies)) +
geom_point() + geom_line() + theme_light() + xlab("Distância (m)") +
ylab("Abundância")
ggplot(df,
aes(x = positive, y = freq, color = positive, group = positive)) +
geom_point() + geom_line() + theme_light() + xlab("Species") +
ylab("Total specimens positive")
df
ggplot(df,
aes(x = positive, y = Freq, color = positive, group = positive)) +
geom_point() + geom_line() + theme_light() + xlab("Species") +
ylab("Total specimens positive")
ggplot(df,aes(x=positive, y=reorder(Freq,+Freq))) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=positive), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Riqueza") +
xlab("Distância (m)")
ggplot(df,aes(x=positive, y=reorder(Freq,+Freq))) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=positive), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma") +
xlab("Species")
ggplot(df,aes(x=positive, y=reorder(Freq,+Freq))) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=positive), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")
ggplot(df,aes(x=positive, y=reorder(Freq,-Freq))) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")
ggplot(df,aes(x=positive, y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")
ggplot(df,aes(x=reorder(positive,-Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for <i>Anaplasma \n marginale</i>") +
xlab("Species")
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for **Anaplasma \n marginale**") +
xlab("Species")
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")+
theme(axis.title.y=element_text(face="italic"))
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")+
theme(axis.title.y=element_text(face="italic"),
axis.title.=element_text(face="italic"))
my_y_title <- expression(paste("Specimens positive for ",
italic("Anaplasma \n marginale")))
my_y_title
my_y_title <- expression(paste("Specimens positive for ",
italic("Anaplasma marginale")))
my_y_title
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")+
theme(labs(y=my_y_title),
axis.title.x=element_text(face="italic"))
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")+
theme(axis.title.x=element_text(face="italic"))
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")+
labs(y=my_y_title)
ggplot(df,aes(x=reorder(positive,+Freq), y=Freq)) +
geom_bar(stat="identity", fill="lightgray") +
geom_text(aes(label=Freq), vjust=1.6, color="black",
position = position_dodge(0.9), size=3.5)+
theme_light() +
ylab("Specimens positive for Anaplasma \n marginale") +
xlab("Species")+
labs(y=my_y_title)+
theme(axis.text.x = element_text(face = "italic"))
remotes::install_github('rstudio/blogdown')
packageVersion("blogdown")
library(blogdown)
library(blogdown)
usethis::create_project("blog")
calib <- kuenm_cal(occ.joint = occ_joint, occ.tra = occ_tra,
occ.test = occ_test, back.dir = back_dir,
batch = bc, out.dir.models = cmdr, selection = "OR_AICc",
reg.mult = rm, f.clas = fc,
maxent.path = max_path, kept = FALSE, out.dir.eval = fmods)
devtools::install_github("marlonecobos/kuenm")
data(sonda)
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
install.packages(randomForest)
install.packages("randomForest")
install.packages("caret")
install.packages("e1071")
install.packages("e1071")
data(Sonar)
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
install.packages('mlbench')
library(mlbench)
data(Sonar)
View(Sonar)
control <- trainControl(method='repeatedcv',
number=10,
repeats=3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
#Number randomely variable selected is mtry
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry=mtry)
data(Sonar)
View(Sonar)
data('BostonHousing')
mydata <- BostonHousing
mydata
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
data(Sonar)
dataset <- Sonar
x <- dataset[,1:60]
y <- dataset[,61]
y
# control <- trainControl(method='repeatedcv',
#                         number=10,
#                         repeats=3)
#Metric compare model is Accuracy
metric <- "Accuracy"
set.seed(123)
#Number randomely variable selected is mtry
mtry <- sqrt(ncol(x))
tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(Class~.,
data=dataset,
method='rf',
metric='Accuracy')
rf_default
#Number randomely variable selected is mtry
#mtry <- sqrt(ncol(x))
#tunegrid <- expand.grid(.mtry=mtry)
rf_default <- train(Class~.,
data=dataset,
method='rf',
metric='Accuracy')
print(rf_default)
#
volcano_raw <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/volcano.csv")
volcano_raw %>%
count(primary_volcano_type, sort = TRUE)
#
library(tidyverse)
volcano_raw <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/volcano.csv")
volcano_raw %>%
count(primary_volcano_type, sort = TRUE)
volcano_raw
View(volcano_raw)
volcano_df <- volcano_raw %>%
transmute(
volcano_type = case_when(
str_detect(primary_volcano_type, "Stratovolcano") ~ "Stratovolcano",
str_detect(primary_volcano_type, "Shield") ~ "Shield",
TRUE ~ "Other"
),
volcano_number, latitude, longitude, elevation,
tectonic_settings, major_rock_1
) %>%
mutate_if(is.character, factor)
volcano_df %>%
count(volcano_type, sort = TRUE)
volcano_df
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
volcano_boot <- bootstraps(volcano_df)
volcano_boot
volcano_df
View(volcano_df)
volcano_rec <- recipe(volcano_type ~ ., data = volcano_df) %>%
update_role(volcano_number, new_role = "Id") %>%
step_other(tectonic_settings) %>%
step_other(major_rock_1) %>%
step_dummy(tectonic_settings, major_rock_1) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_smote(volcano_type)
volcano_rec <- recipe(volcano_type ~ ., data = volcano_df) %>%
update_role(volcano_number, new_role = "Id") %>%
step_other(tectonic_settings) %>%
step_other(major_rock_1) %>%
step_dummy(tectonic_settings, major_rock_1) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_smote(volcano_type)
library(themis)
install.packages("themis")
library(themis)
volcano_rec <- recipe(volcano_type ~ ., data = volcano_df) %>%
update_role(volcano_number, new_role = "Id") %>%
step_other(tectonic_settings) %>%
step_other(major_rock_1) %>%
step_dummy(tectonic_settings, major_rock_1) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_smote(volcano_type)
volcano_rec
volcano_rec <- recipe(volcano_type ~ ., data = volcano_df) %>%
update_role(volcano_number, new_role = "Id") %>%
step_other(tectonic_settings) %>%
step_other(major_rock_1) %>%
step_dummy(tectonic_settings, major_rock_1) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors()) %>%
step_smote(volcano_type)
volcano_prep <- prep(volcano_rec)
juice(volcano_prep)
View(volcano_prep)
rf_spec <- rand_forest(trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
volcano_wf <- workflow() %>%
add_recipe(volcano_rec) %>%
add_model(rf_spec)
volcano_wf
volcano_res <- fit_resamples(
volcano_wf,
resamples = volcano_boot,
control = control_resamples(save_pred = TRUE)
)
rf_spec <- rand_forest(trees = 1000) %>%
set_mode("classification") %>%
set_engine("ranger")
volcano_wf <- workflow() %>%
add_recipe(volcano_rec) %>%
add_model(rf_spec)
volcano_res <- fit_resamples(
volcano_wf,
resamples = volcano_boot,
control = control_resamples(save_pred = TRUE)
)
s(2)
install.packages("disdat")
library(disdat)
?disdat
citation()
library(bibliometrix)
install.packages('bibliometrix')
library(bibliometrix)
devtools::install_github("massimoaria/bibliometrix")
library(bibliometrix)
install.packages('factorextra')
devtools::install_github("kassambara/factoextra")
install.packages("FactoMineR")
install.packages("nloptr")
# install.packages("remotes")
remotes::install_github("astamm/nloptr")
install.packages('bibliometrix')
file <- "https://www.bibliometrix.org/datasets/savedrecs.bib"
M <- convert2df(file = file, dbsource = "isi", format = "bibtex")
library(bibliometrix)
install.packages(c("ape", "BBmisc", "blogdown", "bookdown", "caret", "dials", "extrafont", "formatR", "future", "geomorph", "gert", "Kendall", "leaflet", "lhs", "lmtest", "minpack.lm", "parallelly", "parsnip", "phytools", "RcppArmadillo", "recipes", "reshape", "rgdal", "rmarkdown", "RRPP", "Rvcg", "styler", "terra", "themis", "tidymodels", "tinytex", "tune", "VennDiagram", "workflows", "workflowsets"))
library(bibliometrix)
install.packages('bibliometrix')
library(bibliometrix)
?install.packages
install.packages("pak")
pak::pkg_install("r-lib/rlang")
library(bibliometrix)
install.packages('bibliometrix')
library(bibliometrix)
library(bibliometrix)
api_key = '4e3ce7df305e5f076c177f58a636a500'
df[1,1:3]<-c("aria","massimo","naples")
df <- data.frame()
df[1,1:3]<-c("aria","massimo","naples")
df[2,1:3]<-c("cuccurullo","corrado", NA)
authorsID <- idByAuthor(df, api_key)
set_api_key(api_key)
library(rscopus)
api_key = '4e3ce7df305e5f076c177f58a636a500'
set_api_key(api_key)
df <- data.frame()
df[1,1:3]<-c("aria","massimo","naples")
df[2,1:3]<-c("cuccurullo","corrado", NA)
authorsID <- idByAuthor(df, api_key)
api_key = '4e3ce7df305e5f076c177f58a636a500'
api_key <- set_api_key(api_key)
df <- data.frame()
df[1,1:3]<-c("aria","massimo","naples")
df[2,1:3]<-c("cuccurullo","corrado", NA)
authorsID <- idByAuthor(df, api_key)
?rscopus
??rscopus
get_api_key(api_key = NULL, error = TRUE)
get_api_key(api_key = NULL, error = TRUE, reveal = T)
api_key
print(api_key, reveal = T)
get_api_key(api_key = api_key, error = TRUE, reveal = T)
get_api_key(api_key = api_key, error = TRUE)
print(api_key, reveal = T)
api_key = Sys.getenv('Elsevier_API').
api_key = Sys.getenv('Elsevier_API')
api_key = Sys.getenv('.Renviron')
print(api_key, reveal = T)
api_key = Sys.getenv('Elsevier_API')
get_api_key(api_key = api_key, error = TRUE)
library(rscopus)
get_api_key(api_key = api_key, error = TRUE)
get_api_key(api_key = NULL, error = TRUE)
print(api_key, reveal = T)
api_key = Sys.getenv('Elsevier_API')
api_key = Sys.getenv('Elsevier_API')
print(api_key, reveal = T)
api_key = Sys.getenv('Elsevier_API')
print(api_key, reveal = T)
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::style_selection()
setwd("~/Documents/niche_dermatobia")
help( kuenm_feval )
??kuenm_feval
library(ellipsenm)
library(kuenm)
library(rgdal)
library(tidyverse)
library(rgeos)
library(magrittr)
library(raster)
library(sf)
library(maps)
library(ntbox)
fin_eval <-
kuenm_feval(
path = mod_dir, occ.joint = occ_joint, occ.ind = occ_test,
replicates = replicates, out.eval = out_feval, threshold = threshold,
rand.percent = rand_percent, iterations = iterations,
parallel.proc = F
)
batch_fin <- "data/workflow_maxent/Final_models"
mod_dir <- "data/workflow_maxent/Final_Models"
rep_n <- 5
rep_type <- "Bootstrap"
jackknife <- TRUE
out_format <- "cloglog"
project <- TRUE
G_var_dir <- "G_Variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- TRUE
args <- NULL
occ_test <- "data/workflow_maxent/Model_calibration/Records_with_thin/dhominis_test.csv"
out_eval <- "data/workflow_maxent/Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
occ_joint <- "data/workflow_maxent/Model_calibration/Records_with_thin/dhominis_joint.csv"
occ_tra <- "data/workflow_maxent/Model_calibration/Records_with_thin/dhominis_train.csv"
M_var_dir <- "data/workflow_maxent/Model_calibration/PCs_M_b"
batch_cal <- "data/workflow_maxent/Candidate_models"
out_dir <- "data/workflow_maxent/Candidate_Models"
reg_mult <- c(0.1, 0.25)
f_clas <- c("lq", "lqp", "q")
args <- NULL
maxent_path <- getwd()
wait <- FALSE
run <- TRUE
dir.create("data/workflow_maxent/Final_models")
batch_fin <- "data/workflow_maxent/Final_models"
mod_dir <- "data/workflow_maxent/Final_Models"
rep_n <- 5
rep_type <- "Bootstrap"
jackknife <- TRUE
out_format <- "cloglog"
project <- TRUE
G_var_dir <- "G_Variables"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- TRUE
args <- NULL
replicates <- TRUE
occ_test <-
"data/workflow_maxent/Model_calibration/Records_with_thin/dhominis_test.csv"
out_feval <-
"data/workflow_maxent/Final_Models_evaluation"
fin_eval <-
kuenm_feval(
path = mod_dir, occ.joint = occ_joint, occ.ind = occ_test,
replicates = replicates, out.eval = out_feval, threshold = threshold,
rand.percent = rand_percent, iterations = iterations,
parallel.proc = F
)
